I am working on an Asset Management System for a company. Here are the details:

Project Overview:
This is an enterprise Asset Management System that helps track company assets (laptops, furniture, cars, gadgets) assigned to employees. The system will have two types of users: Employees and Administrators.

Technology Stack:
- Frontend: Angular
- Backend: Spring Boot
- Database: MySQL
- Authentication: JWT
- API Documentation: Swagger

Key Features:

1. Employee Features:
- Registration and login
- View assigned assets
- Request new assets
- Request asset service/repairs
- Participate in asset audits when requested
- Return assets

2. Administrator Features:
- Manage employee accounts
- Manage asset catalog (add/update/delete assets)
- Process asset requests
- Initiate and manage asset audits
- Handle service requests
- View asset allocation reports

3. Asset Management:
- Each asset has: assetNo, assetName, assetCategory, assetModel, manufacturingDate, expiryDate, assetValue
- Assets can be categorized (Laptop, Furniture, Car, Gadgets)
- Assets can have different statuses (Available, Assigned, In Service, Retired)
- Service requests can be raised for assets (malfunction, repair)

4. Security Requirements:
- JWT based authentication
- Role-based access control
- Secure password storage
- Token-based API security

Database Entities:
1. Employee
2. Asset
3. AssetRequest
4. ServiceRequest
5. AuditRequest
6. AssetCategory

Technical Requirements:
1. Backend:
- RESTful APIs using Spring Boot
- JPA/Hibernate for database operations
- Input validation and error handling
- Swagger documentation
- Logging implementation
- Unit testing

2. Frontend:
- Responsive design
- Form validations
- Error handling
- Loading states
- JWT token management
- Route guards for protected routes

My Codebase till now:
assetmanagement_springrest/src/main/java/com/hexaware/ams/entity/Asset.java:
package com.hexaware.ams.entity;
/*
@Author: Arghya Mandal
Date: 2-11-2024
*/
import java.time.LocalDate;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Future;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.PastOrPresent;
import jakarta.validation.constraints.Size;

@Entity
@Table(name = "asset")
public class Asset {

    public enum Status {
        Available,
        Borrowed
    }

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int assetId;

    @NotNull(message = "Asset name cannot be null")
    @Size(min = 2, max = 100, message = "Asset name must be between 2 and 100 characters")
    @Column(name = "asset_name", nullable = false)
    private String assetName;

    @NotNull(message = "Category cannot be null")
    @ManyToOne
    @JoinColumn(name = "category_id", nullable = false)
    private AssetCategory category;

    @Size(max = 50, message = "Asset model must be at most 50 characters")
    @Column(name = "asset_model")
    private String assetModel;

    @PastOrPresent(message = "Manufacturing date cannot be in the future")
    @Column(name = "manufacturing_date")
    private LocalDate manufacturingDate;

    @Future(message = "Expiry date must be in the future")
    @Column(name = "expiry_date")
    private LocalDate expiryDate;

    @NotNull(message = "Asset value cannot be null")
    @Column(name = "asset_value", nullable = false)
    private double assetValue;  

    @NotNull(message = "Status cannot be null")
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private Status status = Status.Available;

    public Asset() {
        super();
    }

    public Asset(int assetId,
                 @NotNull(message = "Asset name cannot be null") @Size(min = 2, max = 100, message = "Asset name must be between 2 and 100 characters") String assetName,
                 @NotNull(message = "Category cannot be null") AssetCategory category,
                 @Size(max = 50, message = "Asset model must be at most 50 characters") String assetModel,
                 @PastOrPresent(message = "Manufacturing date cannot be in the future") LocalDate manufacturingDate,
                 @Future(message = "Expiry date must be in the future") LocalDate expiryDate,
                 @NotNull(message = "Asset value cannot be null") double assetValue,  
                 @NotNull(message = "Status cannot be null") Status status) {
        super();
        this.assetId = assetId;
        this.assetName = assetName;
        this.category = category;
        this.assetModel = assetModel;
        this.manufacturingDate = manufacturingDate;
        this.expiryDate = expiryDate;
        this.assetValue = assetValue;
        this.status = status;
    }

    public int getAssetId() {
        return assetId;
    }

    public void setAssetId(int assetId) {
        this.assetId = assetId;
    }

    public String getAssetName() {
        return assetName;
    }

    public void setAssetName(String assetName) {
        this.assetName = assetName;
    }

    public AssetCategory getCategory() {
        return category;
    }

    public void setCategory(AssetCategory category) {
        this.category = category;
    }

    public String getAssetModel() {
        return assetModel;
    }

    public void setAssetModel(String assetModel) {
        this.assetModel = assetModel;
    }

    public LocalDate getManufacturingDate() {
        return manufacturingDate;
    }

    public void setManufacturingDate(LocalDate manufacturingDate) {
        this.manufacturingDate = manufacturingDate;
    }

    public LocalDate getExpiryDate() {
        return expiryDate;
    }

    public void setExpiryDate(LocalDate expiryDate) {
        this.expiryDate = expiryDate;
    }

    public double getAssetValue() {
        return assetValue;  // Returns a double
    }

    public void setAssetValue(double assetValue) {
        this.assetValue = assetValue;  // Accepts a double
    }

    public Status getStatus() {
        return status;
    }

    public void setStatus(Status status) {
        this.status = status;
    }

    @Override
    public String toString() {
        return "Asset [assetId=" + assetId + ", assetName=" + assetName + ", category=" + category + ", assetModel="
                + assetModel + ", manufacturingDate=" + manufacturingDate + ", expiryDate=" + expiryDate
                + ", assetValue=" + assetValue + ", status=" + status + "]";
    }
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/entity/AssetAudit.java:
package com.hexaware.ams.entity;
/*
@Author: Arghya Mandal
Date: 2-11-2024
*/
import java.time.LocalDateTime;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.PreUpdate;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;

@Entity
@Table(name = "asset_audit")
public class AssetAudit {

    public enum AuditStatus {
        Pending,
        Verified,
        Rejected
    }

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int auditId;

    @NotNull(message = "Employee cannot be null")
    @ManyToOne
    @JoinColumn(name = "employee_id", nullable = false)
    private Employee employee;

    @NotNull(message = "Asset cannot be null")
    @ManyToOne
    @JoinColumn(name = "asset_id", nullable = false)
    private Asset asset;

    @NotNull(message = "Audit status cannot be null")
    @Enumerated(EnumType.STRING)
    @Column(name = "audit_status", nullable = false)
    private AuditStatus auditStatus = AuditStatus.Pending;

    @NotNull(message = "Requested at cannot be null")
    @Column(name = "requested_at", nullable = false, updatable = false)
    private LocalDateTime requestedAt = LocalDateTime.now();

    @Column(name = "updated_at")
    private LocalDateTime updatedAt = LocalDateTime.now();

	public AssetAudit() {
		super();
	}

	public AssetAudit(int auditId, @NotNull(message = "Employee cannot be null") Employee employee,
			@NotNull(message = "Asset cannot be null") Asset asset,
			@NotNull(message = "Audit status cannot be null") AuditStatus auditStatus,
			@NotNull(message = "Requested at cannot be null") LocalDateTime requestedAt, LocalDateTime updatedAt) {
		super();
		this.auditId = auditId;
		this.employee = employee;
		this.asset = asset;
		this.auditStatus = auditStatus;
		this.requestedAt = requestedAt;
		this.updatedAt = updatedAt;
	}

	public int getAuditId() {
		return auditId;
	}

	public void setAuditId(int auditId) {
		this.auditId = auditId;
	}

	public Employee getEmployee() {
		return employee;
	}

	public void setEmployee(Employee employee) {
		this.employee = employee;
	}

	public Asset getAsset() {
		return asset;
	}

	public void setAsset(Asset asset) {
		this.asset = asset;
	}

	public AuditStatus getAuditStatus() {
		return auditStatus;
	}

	public void setAuditStatus(AuditStatus auditStatus) {
		this.auditStatus = auditStatus;
	}

	public LocalDateTime getRequestedAt() {
		return requestedAt;
	}

	public void setRequestedAt(LocalDateTime requestedAt) {
		this.requestedAt = requestedAt;
	}

	public LocalDateTime getUpdatedAt() {
		return updatedAt;
	}

	public void setUpdatedAt(LocalDateTime updatedAt) {
		this.updatedAt = updatedAt;
	}

	@Override
	public String toString() {
		return "AssetAudit [auditId=" + auditId + ", employee=" + employee + ", asset=" + asset + ", auditStatus="
				+ auditStatus + ", requestedAt=" + requestedAt + ", updatedAt=" + updatedAt + "]";
	}

    

}

assetmanagement_springrest/src/main/java/com/hexaware/ams/entity/AssetBorrowing.java:
package com.hexaware.ams.entity;
/*
@Author: Arghya Mandal
Date: 2-11-2024
*/
import java.time.LocalDateTime;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;

@Entity
@Table(name = "asset_borrowing")
public class AssetBorrowing {

    public enum Status {
        Active,
        Returned
    }

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int borrowingId;

    @NotNull(message = "Employee cannot be null")
    @ManyToOne
    @JoinColumn(name = "employee_id", nullable = false)
    private Employee employee;

    @NotNull(message = "Asset cannot be null")
    @ManyToOne
    @JoinColumn(name = "asset_id", nullable = false)
    private Asset asset;

    @NotNull
    @Column(name = "borrowed_at", nullable = false)
    private LocalDateTime borrowedAt = LocalDateTime.now();

    @Column(name = "returned_at")
    private LocalDateTime returnedAt;

    @NotNull
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private Status status = Status.Active;

	public AssetBorrowing() {
		super();
	}

	public AssetBorrowing(int borrowingId, @NotNull(message = "Employee cannot be null") Employee employee,
			@NotNull(message = "Asset cannot be null") Asset asset, @NotNull LocalDateTime borrowedAt,
			LocalDateTime returnedAt, @NotNull Status status) {
		super();
		this.borrowingId = borrowingId;
		this.employee = employee;
		this.asset = asset;
		this.borrowedAt = borrowedAt;
		this.returnedAt = returnedAt;
		this.status = status;
	}

	public int getBorrowingId() {
		return borrowingId;
	}

	public void setBorrowingId(int borrowingId) {
		this.borrowingId = borrowingId;
	}

	public Employee getEmployee() {
		return employee;
	}

	public void setEmployee(Employee employee) {
		this.employee = employee;
	}

	public Asset getAsset() {
		return asset;
	}

	public void setAsset(Asset asset) {
		this.asset = asset;
	}

	public LocalDateTime getBorrowedAt() {
		return borrowedAt;
	}

	public void setBorrowedAt(LocalDateTime borrowedAt) {
		this.borrowedAt = borrowedAt;
	}

	public LocalDateTime getReturnedAt() {
		return returnedAt;
	}

	public void setReturnedAt(LocalDateTime returnedAt) {
		this.returnedAt = returnedAt;
	}

	public Status getStatus() {
		return status;
	}

	public void setStatus(Status status) {
		this.status = status;
	}

	@Override
	public String toString() {
		return "AssetBorrowing [borrowingId=" + borrowingId + ", employee=" + employee + ", asset=" + asset
				+ ", borrowedAt=" + borrowedAt + ", returnedAt=" + returnedAt + ", status=" + status + "]";
	}

    
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/entity/AssetCategory.java:
package com.hexaware.ams.entity;
/*
@Author: Arghya Mandal
Date: 2-11-2024
*/
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

@Entity
@Table(name = "asset_category")
public class AssetCategory {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int categoryId;

    @NotNull(message = "Category name cannot be null")
    @Size(min = 2, max = 100, message = "Category name must be between 2 and 100 characters")
    @Column(name = "category_name", nullable = false, unique = true)
    private String categoryName;

	public AssetCategory() {
		super();
	}

	public AssetCategory(int categoryId,
			@NotNull(message = "Category name cannot be null") @Size(min = 2, max = 100, message = "Category name must be between 2 and 100 characters") String categoryName) {
		super();
		this.categoryId = categoryId;
		this.categoryName = categoryName;
	}

	public int getCategoryId() {
		return categoryId;
	}

	public void setCategoryId(int categoryId) {
		this.categoryId = categoryId;
	}

	public String getCategoryName() {
		return categoryName;
	}

	public void setCategoryName(String categoryName) {
		this.categoryName = categoryName;
	}

	@Override
	public String toString() {
		return "AssetCategory [categoryId=" + categoryId + ", categoryName=" + categoryName + "]";
	}

    
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/entity/Employee.java:
package com.hexaware.ams.entity;

import java.util.Collection;
import java.util.List;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

/*
 * @Author: Venkatesh Pai
 * Employee Entity 
 */
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.Email;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

@Entity
@Table(name = "employee")
public class Employee implements UserDetails {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int employeeId;

	@Column(nullable = false)
	@NotNull(message = "Name cannot be null")
	@Size(min = 2, max = 100, message = "Name must be between 2 and 100 characters")
	private String name;
	
	@NotNull(message = "Choose from Male, Female or Other")
	@Column(nullable = false)
	@Enumerated(EnumType.STRING)
	private Gender gender;

	@NotNull(message = "Contact number cannot be null")
	@Size(min = 7, max = 15, message = "Contact number must be between 7 and 15 characters")
	@Column(name = "contact_number", nullable = false)
	private String contactNumber;
	
	@NotNull(message = "Address cannot be null")
	@Size(min = 3, max = 255, message = "Address must be between 3 and 255 characters")
	@Column(nullable = false)
	private String address;

	@NotNull(message = "Email cannot be null")
    @Email(message = "Email should be valid")
    @Column(nullable = false, unique = true)
	private String email;
	
	
	@NotNull(message = "Password cannot be null")
    @Size(min = 6, message = "Password must be at least 6 characters")
	@Column(nullable = false)
	private String password;

	
    @NotNull(message = "Role cannot be null")
	@ManyToOne
	@JoinColumn(name = "role_Id", nullable = false)
	private Role role;
    
    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return List.of(new SimpleGrantedAuthority(role.getRoleName()));
    }
    @Override
    public String getUsername() {
        return email;
    }
    
    @Override
    public boolean isAccountNonExpired() {
        return true;
    }
    
    @Override
    public boolean isAccountNonLocked() {
        return true;
    }
    
    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }
    
    @Override
    public boolean isEnabled() {
        return true;
    }

	public Employee() {
		super();
	}

	

	public Employee(int employeeId,
			@NotNull(message = "Name cannot be null") @Size(min = 2, max = 100, message = "Name must be between 2 and 100 characters") String name,
			@NotNull(message = "Choose from Male, Female or Other") Gender gender,
			@NotNull(message = "Contact number cannot be null") @Size(min = 7, max = 15, message = "Contact number must be between 7 and 15 characters") String contactNumber,
			@NotNull(message = "Address cannot be null") @Size(min = 3, max = 255, message = "Address must be between 3 and 255 characters") String address,
			@NotNull(message = "Email cannot be null") @Email(message = "Email should be valid") String email,
			@NotNull(message = "Password cannot be null") @Size(min = 6, message = "Password must be at least 6 characters") String password,
			@NotNull(message = "Role cannot be null") Role role) {
		super();
		this.employeeId = employeeId;
		this.name = name;
		this.gender = gender;
		this.contactNumber = contactNumber;
		this.address = address;
		this.email = email;
		this.password = password;
		this.role = role;
	}



	public int getEmployeeId() {
		return employeeId;
	}

	public void setEmployeeId(int employeeId) {
		this.employeeId = employeeId;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Gender getGender() {
		return gender;
	}

	public void setGender(Gender gender) {
		this.gender = gender;
	}

	public String getContactNumber() {
		return contactNumber;
	}

	public void setContactNumber(String contactNumber) {
		this.contactNumber = contactNumber;
	}

	public String getAddress() {
		return address;
	}

	public void setAddress(String address) {
		this.address = address;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public Role getRole() {
		return role;
	}

	public void setRole(Role role) {
		this.role = role;
	}

	@Override
	public String toString() {
		return "Employee [employeeId=" + employeeId + ", name=" + name + ", gender=" + gender + ", contactNumber="
				+ contactNumber + ", address=" + address + ", email=" + email + ", password=" + password + ", role="
				+ role + "]";
	}

	public enum Gender {

		Male, Female, Other
	}

}

assetmanagement_springrest/src/main/java/com/hexaware/ams/entity/IssueType.java:
package com.hexaware.ams.entity;

/*
 * @Author: Venkatesh Pai
 * Issue Type Entity
 */
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

@Entity
@Table(name = "issue_type")
public class IssueType {
	
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int issueTypeId;
	
	
	@NotNull(message = "Issue type name cannot be null")
    @Size(min = 2, max = 100, message = "Issue type name must be between 2 and 100 characters")
	@Column(name = "issue_type_name", unique = true, nullable = false)
	private String issueTypeName;

	public IssueType() {
		super();
	}

	

	public IssueType(int issueTypeId,
			@NotNull(message = "Issue type name cannot be null") @Size(min = 2, max = 100, message = "Issue type name must be between 2 and 100 characters") String issueTypeName) {
		super();
		this.issueTypeId = issueTypeId;
		this.issueTypeName = issueTypeName;
	}



	public int getIssueTypeId() {
		return issueTypeId;
	}

	public void setIssueTypeId(int issueTypeId) {
		this.issueTypeId = issueTypeId;
	}

	public String getIssueTypeName() {
		return issueTypeName;
	}

	public void setIssueTypeName(String issueTypeName) {
		this.issueTypeName = issueTypeName;
	}

	@Override
	public String toString() {
		return "IssueType [issueTypeId=" + issueTypeId + ", issueTypeName=" + issueTypeName + "]";
	}
	
	

}

assetmanagement_springrest/src/main/java/com/hexaware/ams/entity/Role.java:
package com.hexaware.ams.entity;

/*
 * @Author: Venkatesh Pai
 * Role Entity
 */
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

@Entity
@Table(name = "role")
public class Role {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int roleId;

	@Column(name = "role_name", unique = true, nullable = false)
	@NotNull(message = "Role name cannot be null")
	@Size(min = 2, max = 50, message = "Role name must be between 2 and 50 charachters")
	private String roleName;

	public Role() {
		super();
	}

	public Role(int roleId,
			@NotNull(message = "Role name cannot be null") @Size(min = 2, max = 50, message = "Role name must be between 2 and 50 charachters") String roleName) {
		super();
		this.roleId = roleId;
		this.roleName = roleName;
	}

	public int getRoleId() {
		return roleId;
	}

	public void setRoleId(int roleId) {
		this.roleId = roleId;
	}

	public String getRoleName() {
		return roleName;
	}

	public void setRoleName(String roleName) {
		this.roleName = roleName;
	}

	@Override
	public String toString() {
		return "Role [roleId=" + roleId + ", roleName=" + roleName + "]";
	}

}

assetmanagement_springrest/src/main/java/com/hexaware/ams/entity/ServiceRequest.java:
package com.hexaware.ams.entity;

import java.time.LocalDateTime;
/*
 * @Author: Venkatesh Pai
 * Service Request Entity
 */
import java.util.Date;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;

@Entity
@Table(name = "service_request")
public class ServiceRequest {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
    private int serviceRequestId;

	@NotNull(message = "Employee cannot be null")
    @ManyToOne
    @JoinColumn(name = "employee_id", nullable = false)
    private Employee employee;

	
	
	@NotNull(message = "Asset cannot be null")
    @ManyToOne
    @JoinColumn(name = "asset_id")
    private Asset asset;
    

	@NotNull(message = "Description cannot be null")
    @Size(min = 5, message = "Description must be at least 5 characters")
    @Column(nullable = false, columnDefinition = "TEXT")
    private String description;

    @ManyToOne
    @JoinColumn(name = "issue_type_id", nullable = false)
    private IssueType issueType;

    
    @NotNull(message = "Status cannot be null")
    @Column(nullable = false)
    @Enumerated(EnumType.STRING)
    private Status status = Status.Pending;

    @NotNull(message = "Date cannot be null")
    @Column(name = "requested_at", nullable = false)
	private LocalDateTime requestedAt;
    
    public enum Status {
    	Pending, Transit, Completed
    }

	public ServiceRequest() {
		super();
	}

	
	public ServiceRequest(int serviceRequestId, @NotNull(message = "Employee cannot be null") Employee employee,
			@NotNull(message = "Asset cannot be null") Asset asset,
			@NotNull(message = "Description cannot be null") @Size(min = 5, message = "Description must be at least 5 characters") String description,
			IssueType issueType, @NotNull(message = "Status cannot be null") Status status,
			@NotNull(message = "Date cannot be null") LocalDateTime requestedAt) {
		super();
		this.serviceRequestId = serviceRequestId;
		this.employee = employee;
		this.asset = asset;
		this.description = description;
		this.issueType = issueType;
		this.status = status;
		this.requestedAt = requestedAt;
	}


	public int getServiceRequestId() {
		return serviceRequestId;
	}

	public void setServiceRequestId(int serviceRequestId) {
		this.serviceRequestId = serviceRequestId;
	}

	public Employee getEmployee() {
		return employee;
	}

	public void setEmployee(Employee employee) {
		this.employee = employee;
	}
	
	

	public Asset getAsset() {
		return asset;
	}

	public void setAsset(Asset asset) {
		this.asset = asset;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public IssueType getIssueType() {
		return issueType;
	}

	public void setIssueType(IssueType issueType) {
		this.issueType = issueType;
	}

	public Status getStatus() {
		return status;
	}

	public void setStatus(Status status) {
		this.status = status;
	}

	public LocalDateTime getRequestedAt() {
		return requestedAt;
	}

	public void setRequestedAt(LocalDateTime requestedAt) {
		this.requestedAt = requestedAt;
	}

	@Override
	public String toString() {
		return "ServiceRequest [serviceRequestId=" + serviceRequestId + ", employee=" + employee + ", asset=" + asset
				+ ", description=" + description + ", issueType=" + issueType + ", status=" + status + ", requestedAt="
				+ requestedAt + "]";
	}  
    
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/dto/AssetAuditDto.java:
package com.hexaware.ams.dto;

import java.time.LocalDateTime;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class AssetAuditDto {
	public enum AuditStatus {
        Pending,
        Verified,
        Rejected
    }
	private int auditId;
	private EmployeeDto employeeDto;
	private AssetDto assetDto;
	private AuditStatus auditStatus = AuditStatus.Pending;
	private LocalDateTime requestedAt;
	private LocalDateTime updatedAt;
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/dto/AssetBorrowingDto.java:
package com.hexaware.ams.dto;

import java.time.LocalDateTime;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class AssetBorrowingDto {
	public enum Status {
        Active,
        Returned
    }
	private int borrowingId;
	private EmployeeDto employeeDto;
	private AssetDto assetDto;
	private LocalDateTime borrowedAt;
	private LocalDateTime returnedAt;
	private Status status = Status.Active;
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/dto/AssetCategoryDto.java:
package com.hexaware.ams.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class AssetCategoryDto {
	private int categoryId;
	private String categoryName;
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/dto/AssetDto.java:
package com.hexaware.ams.dto;

import java.time.LocalDate;


import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@NoArgsConstructor
@AllArgsConstructor
@Data
public class AssetDto {
	public enum Status {
        Available,
        Borrowed
    }
	private int assetId;
	private String assetName;
	private AssetCategoryDto category;
	private String assetModel;
	private LocalDate manufacturingDate;
	private LocalDate expiryDate;
	private double assetValue;
	private Status status = Status.Available;
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/dto/AuthenticationRequest.java:
package com.hexaware.ams.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class AuthenticationRequest {
    private String email;
    private String password;
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/dto/AuthenticationResponse.java:
package com.hexaware.ams.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class AuthenticationResponse {
    private String token;
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/dto/EmployeeDto.java:
package com.hexaware.ams.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class EmployeeDto {
	
	private int employeeId;
	private String name;
	private GenderDTO gender;
	private String contactNumber;
	private String address;
	private String email;
	private String password;
	private RoleDto role;
	
	public enum GenderDTO{
		Male, Female, Other;
	}

}

assetmanagement_springrest/src/main/java/com/hexaware/ams/dto/IssueTypeDto.java:
package com.hexaware.ams.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class IssueTypeDto {
	
	private int issueTypeId;
	private String issueTypeName;

}

assetmanagement_springrest/src/main/java/com/hexaware/ams/dto/RegisterRequest.java:
package com.hexaware.ams.dto;

import com.hexaware.ams.entity.Employee.Gender;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@AllArgsConstructor
@NoArgsConstructor
public class RegisterRequest {
    private String name;
    private Gender gender;
    private String contactNumber;
    private String address;
    private String email;
    private String password;
    private int roleId; 
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/dto/RoleDto.java:
package com.hexaware.ams.dto;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class RoleDto {
	
	private int roleId;
	private String roleName;

}

assetmanagement_springrest/src/main/java/com/hexaware/ams/dto/ServiceRequestDto.java:
package com.hexaware.ams.dto;

import java.time.LocalDateTime;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
public class ServiceRequestDto {
	
	private int serviceRequestId;
	private EmployeeDto employee;
	private AssetDto asset;
	private String description;
	private IssueTypeDto issueType;
	private StatusDTO status = StatusDTO.Pending;
	private LocalDateTime requestedAt;
	
	
	public enum StatusDTO{
		Pending, Transit, Completed
	}

}

assetmanagement_springrest/src/main/java/com/hexaware/ams/exception/BadRequestException.java:
package com.hexaware.ams.exception;
/*
@Author: Arghya Mandal
Date: 8-11-2024
*/
public class BadRequestException extends RuntimeException {

    private static final long serialVersionUID = 1L;

    public BadRequestException(String message) {
        super(message);
    }
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/exception/ResourceAlreadyExistsException.java:
package com.hexaware.ams.exception;

public class ResourceAlreadyExistsException extends RuntimeException  {

	
	private static final long serialVersionUID = 1L;
	
	public ResourceAlreadyExistsException (String message) {
		super(message);
	}

}

assetmanagement_springrest/src/main/java/com/hexaware/ams/exception/ResourceNotFoundException.java:
package com.hexaware.ams.exception;
/*
@Author: Arghya Mandal
Date: 8-11-2024
*/
public class ResourceNotFoundException extends RuntimeException {

    private static final long serialVersionUID = 1L;

    public ResourceNotFoundException(String message) {
        super(message);
    }
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/exception/MethodArgumentNotValidException.java:
package com.hexaware.ams.exception;

public class MethodArgumentNotValidException extends RuntimeException {

	private static final long serialVersionUID = 1L;
	
	public MethodArgumentNotValidException (String message) {
		super(message);

	}
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/exception/GlobalExceptionHandler.java:
package com.hexaware.ams.exception;

/*
 * @Author: Arghya & Venkatesh
 * Date: 8-11-24
 */
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;


@RestControllerAdvice
public class GlobalExceptionHandler {
	
	@ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<String> handleResourceNotFoundException(ResourceNotFoundException ex) {
        String errorMessage = ex.getMessage();
        return new ResponseEntity<>(errorMessage, HttpStatus.NOT_FOUND);
    }
	
	@ExceptionHandler(BadRequestException.class)
    public ResponseEntity<String> badRequestException(BadRequestException ex) {
        String errorMessage = ex.getMessage();
        return new ResponseEntity<>(errorMessage, HttpStatus.NOT_FOUND);
    }
	
	@ExceptionHandler(ResourceAlreadyExistsException.class)
	public ResponseEntity<String> resourceAlreadyExistsException(ResourceAlreadyExistsException ex ){
		String errorMessage = ex.getMessage();
		return new ResponseEntity<>(errorMessage, HttpStatus.CONFLICT);
	}
	
	@ExceptionHandler(MethodArgumentNotValidException.class)
	public ResponseEntity<String> MethodArgumentNotValidException(org.springframework.web.bind.MethodArgumentNotValidException ex){
		String errorMessage = ex.getMessage();
		return new ResponseEntity<>(errorMessage, HttpStatus.NOT_ACCEPTABLE);
	}
	
	@ExceptionHandler(UnauthorizedException.class)
	public ResponseEntity<String> unauthorizedException(UnauthorizedException ex){
		String errorMessage = ex.getMessage();
		return new ResponseEntity<>(errorMessage, HttpStatus.NOT_FOUND);
	}
	
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/repository/IAssetAuditRepository.java:
package com.hexaware.ams.repository;
/*
@Author: Arghya Mandal
Date: 8-11-2024
*/
import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.hexaware.ams.entity.AssetAudit;
import com.hexaware.ams.entity.AssetAudit.AuditStatus;
import com.hexaware.ams.entity.Employee;
@Repository
public interface IAssetAuditRepository extends JpaRepository<AssetAudit, Integer> {
	List<AssetAudit> findByEmployee(Employee employee);
	List<AssetAudit> findByAuditStatus(AuditStatus auditStatus);
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/repository/IAssetBorrowingRepository.java:
package com.hexaware.ams.repository;
/*
@Author: Arghya Mandal
Date: 8-11-2024
*/
import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.hexaware.ams.entity.AssetBorrowing;
import com.hexaware.ams.entity.AssetBorrowing.Status;
import com.hexaware.ams.entity.Employee;

@Repository
public interface IAssetBorrowingRepository extends JpaRepository<AssetBorrowing, Integer>{
	List<AssetBorrowing> findByEmployee(Employee employee);
	List<AssetBorrowing> findByStatus(Status status);
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/repository/IAssetRepository.java:
package com.hexaware.ams.repository;
/*
@Author: Arghya Mandal
Date: 8-11-2024
*/
import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.hexaware.ams.entity.Asset;
import com.hexaware.ams.entity.Asset.Status;
import com.hexaware.ams.entity.AssetCategory;
@Repository
public interface IAssetRepository extends JpaRepository<Asset, Integer> {
	List<Asset> findAssetByCategory(AssetCategory categoryName);
	List<Asset> findByStatus(Status status);
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/repository/IEmployeeRepository.java:
package com.hexaware.ams.repository;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.hexaware.ams.entity.Employee;

@Repository
public interface IEmployeeRepository extends JpaRepository<Employee, Integer> {

	int findByEmailAndPassword(String email, String password);
	
	Optional<Employee> findByEmail(String email);
	
	boolean existsByEmail(String email);
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/repository/IIssueTypeRepository.java:
package com.hexaware.ams.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.hexaware.ams.entity.IssueType;

@Repository
public interface IIssueTypeRepository extends JpaRepository<IssueType, Integer> {

	IssueType findByIssueTypeName(String issueTypeName);
	
	boolean existsByIssueTypeName(String issueTypeName);
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/repository/IRoleRepository.java:
package com.hexaware.ams.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.hexaware.ams.entity.Role;

@Repository
public interface IRoleRepository extends JpaRepository<Role, Integer> {

	Role findByRoleName(String roleName);
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/repository/IServiceRequestRepository.java:
package com.hexaware.ams.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import com.hexaware.ams.entity.Employee;
import com.hexaware.ams.entity.ServiceRequest;
import com.hexaware.ams.entity.ServiceRequest.Status;

@Repository
public interface IServiceRequestRepository extends JpaRepository<ServiceRequest, Integer> {

	List<ServiceRequest> findByEmployeeEmployeeId(int employeeId);
	
	
	@Query("select s from ServiceRequest s where s.status =: status")
	List<ServiceRequest> findByStatus(String status);
	
	
	List<ServiceRequest> findByStatus(ServiceRequest.Status status);
	
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/service/AssetAuditServiceImp.java:
package com.hexaware.ams.service;
import java.time.LocalDateTime;
/*
@Author: Arghya Mandal
Date: 9-11-2024
*/
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hexaware.ams.dto.AssetAuditDto;
import com.hexaware.ams.entity.Asset;
import com.hexaware.ams.entity.AssetAudit;
import com.hexaware.ams.entity.Employee;
import com.hexaware.ams.exception.ResourceNotFoundException;
import com.hexaware.ams.repository.IAssetAuditRepository;
import com.hexaware.ams.repository.IAssetRepository;
import com.hexaware.ams.repository.IEmployeeRepository;

import jakarta.transaction.Transactional;

@Service
@Transactional
public class AssetAuditServiceImp implements IAssetAuditService {

    @Autowired
    private IAssetAuditRepository auditRepository;

    @Autowired
    private IEmployeeRepository employeeRepository;

    @Autowired
    private IAssetRepository assetRepository;
    Logger logger = LoggerFactory.getLogger(AssetAuditServiceImp.class);
    @Override
    public AssetAudit sendAuditRequest(int employeeId, int assetId) {
        // getting employee
    	Employee employee = employeeRepository.findById(employeeId)
                .orElseThrow(() -> new ResourceNotFoundException("Employee not found"));
        // getting asset
    	Asset asset = assetRepository.findById(assetId)
                .orElseThrow(() -> new ResourceNotFoundException("Asset not found"));
    	// creating new audit record
        AssetAudit audit = new AssetAudit();
        audit.setEmployee(employee);
        audit.setAsset(asset);
        audit.setAuditStatus(AssetAudit.AuditStatus.Pending);
        logger.info("Asset audit request sent.");
        return auditRepository.save(audit);
    }

    @Override
    public AssetAudit updateAuditStatus(int auditId, AssetAuditDto.AuditStatus auditStatus) {
        // getting audit record
    	AssetAudit audit = auditRepository.findById(auditId)
                .orElseThrow(() -> new ResourceNotFoundException("Audit not found with id: " + auditId));
    	// updating audit status
    	audit.setAuditStatus(AssetAudit.AuditStatus.valueOf(auditStatus.name()));
        audit.setUpdatedAt(LocalDateTime.now());
        logger.info("Audit request updated at: "+audit.getUpdatedAt());
        return auditRepository.save(audit);
    }

    @Override
    public List<AssetAudit> getAuditsByEmployee(int employeeId) {
        // getting employee
    	Employee employee = employeeRepository.findById(employeeId)
                .orElseThrow(() -> new ResourceNotFoundException("Employee not found"));
        logger.info("Audits of employee with id: " + employeeId + " returned.");
    	return auditRepository.findByEmployee(employee);
    }

    @Override
    public List<AssetAudit> getAllAudits() {
        logger.info("All audits returned.");
    	return auditRepository.findAll();
    }

    @Override
    public AssetAudit getAuditById(int auditId) {
        logger.info("Returning audit request with id: " + auditId);
    	return auditRepository.findById(auditId)
                .orElseThrow(() -> new ResourceNotFoundException("Audit not found with id: " + auditId));
    }
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/service/AssetBorrowingServiceImp.java:
package com.hexaware.ams.service;
/*
@Author: Arghya Mandal
Date: 9-11-2024
*/
import java.time.LocalDateTime;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hexaware.ams.entity.Asset;
import com.hexaware.ams.entity.AssetBorrowing;
import com.hexaware.ams.entity.Employee;
import com.hexaware.ams.exception.BadRequestException;
import com.hexaware.ams.exception.ResourceNotFoundException;
import com.hexaware.ams.repository.IAssetBorrowingRepository;
import com.hexaware.ams.repository.IAssetRepository;
import com.hexaware.ams.repository.IEmployeeRepository;

import jakarta.transaction.Transactional;

@Service
@Transactional 
public class AssetBorrowingServiceImp implements IAssetBorrowingService {

    @Autowired
    private IAssetBorrowingRepository borrowingRepository;

    @Autowired
    private IAssetRepository assetRepository;

    @Autowired
    private IEmployeeRepository employeeRepository;
    Logger logger = LoggerFactory.getLogger(AssetBorrowingServiceImp.class);
    @Override
    public AssetBorrowing borrowAsset(int employeeId, int assetId) {
        // Getting employee
        Employee employee = employeeRepository.findById(employeeId)
            .orElseThrow(() -> new ResourceNotFoundException("Employee not found with ID: " + employeeId));

        // Getting asset
        Asset asset = assetRepository.findById(assetId)
            .orElseThrow(() -> new ResourceNotFoundException("Asset not found with ID: " + assetId));

        // Checking if asset is available
        if (Asset.Status.Borrowed.equals(asset.getStatus())) {
            throw new BadRequestException("Asset is already borrowed");
        }

        // Creating new borrowing record
        AssetBorrowing borrowing = new AssetBorrowing();
        borrowing.setEmployee(employee);
        borrowing.setAsset(asset);
        borrowing.setBorrowedAt(LocalDateTime.now());
        borrowing.setStatus(AssetBorrowing.Status.Active);

        // Updating asset status
        asset.setStatus(Asset.Status.Borrowed);
        assetRepository.save(asset);
        logger.info(asset.getAssetName() + " with id: " + asset.getAssetId() +" is borrowed by employee with id: " + employee.getEmployeeId());
        return borrowingRepository.save(borrowing);
    }

    @Override
    public AssetBorrowing returnAsset(int borrowingId) {
        logger.info("Attempting to return asset for borrowing ID: {}", borrowingId);
        
        // Getting borrowing record
        AssetBorrowing borrowing = borrowingRepository.findById(borrowingId)
            .orElseThrow(() -> {
                logger.error("Borrowing record not found with ID: {}", borrowingId);
                return new ResourceNotFoundException("Borrowing record not found with ID: " + borrowingId);
            });
            
        logger.info("Found borrowing record. Current status: {}", borrowing.getStatus());

        // Checking if already returned
        if (AssetBorrowing.Status.Returned.equals(borrowing.getStatus())) {
            logger.warn("Asset has already been returned for borrowing ID: {}", borrowingId);
            throw new BadRequestException("Asset has already been returned");
        }

        // Updating borrowing record
        borrowing.setReturnedAt(LocalDateTime.now());
        borrowing.setStatus(AssetBorrowing.Status.Returned);
        
        // Updating asset status
        Asset asset = borrowing.getAsset();
        logger.info("Updating asset status for asset ID: {}. Current status: {}", 
            asset.getAssetId(), asset.getStatus());
            
        asset.setStatus(Asset.Status.Available);
        assetRepository.save(asset);
        
        logger.info("Successfully updated asset status to Available");
        
        AssetBorrowing savedBorrowing = borrowingRepository.save(borrowing);
        logger.info("Successfully updated borrowing record to Returned");
        
        return savedBorrowing;
    }

    @Override
    public List<AssetBorrowing> getBorrowingsByEmployee(int employeeId) {
        // Checking if employee exists
        Employee employee = employeeRepository.findById(employeeId)
            .orElseThrow(() -> new ResourceNotFoundException("Employee not found with ID: " + employeeId));

        // Getting borrowings for employee
        List<AssetBorrowing> borrowings = borrowingRepository.findByEmployee(employee);
        if (borrowings.isEmpty()) {
            throw new ResourceNotFoundException("No borrowing records found for employee with ID: " + employeeId);
        }
        logger.info("Returning borrowings of employee with id: " + employeeId);
        return borrowings;
    }

    @Override
    public List<AssetBorrowing> getAllActiveBorrowings() {
        // Getting all active borrowings
        List<AssetBorrowing> activeBorrowings = borrowingRepository.findByStatus(AssetBorrowing.Status.Active);
        if (activeBorrowings.isEmpty()) {
            throw new ResourceNotFoundException("No active borrowings found");
        }
        logger.info("Returning all active borrowings.");
        return activeBorrowings;
    }
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/service/AssetServiceImp.java:
package com.hexaware.ams.service;
/*
@Author: Arghya Mandal
Date: 9-11-2024
*/
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hexaware.ams.dto.AssetCategoryDto;
import com.hexaware.ams.dto.AssetDto;
import com.hexaware.ams.entity.Asset;
import com.hexaware.ams.entity.AssetCategory;
import com.hexaware.ams.exception.BadRequestException;
import com.hexaware.ams.exception.ResourceNotFoundException;
import com.hexaware.ams.repository.IAssetRepository;

import jakarta.transaction.Transactional;

@Service
@Transactional
public class AssetServiceImp implements IAssetService {

    @Autowired
    private IAssetRepository assetRepository;
    Logger logger = LoggerFactory.getLogger(AssetServiceImp.class);
    @Override
    public Asset addAsset(AssetDto assetDto) {
        try {
        	Asset asset = new Asset();
        	asset.setAssetName(assetDto.getAssetName());
            asset.setAssetModel(assetDto.getAssetModel());
            asset.setCategory(mapToCategory(assetDto.getCategory()));
            asset.setManufacturingDate(assetDto.getManufacturingDate());
            asset.setExpiryDate(assetDto.getExpiryDate());
            asset.setAssetValue(assetDto.getAssetValue());
            asset.setStatus(Asset.Status.Available);

            Asset savedAsset = assetRepository.save(asset);
            logger.info("Asset added with ID: {}", savedAsset.getAssetId());
            return savedAsset;
        } catch(Exception e) {
            throw new BadRequestException("Failed to add asset: " + e.getMessage());
        }
    }

    @Override
    public Asset updateAsset(AssetDto assetDto) {
    	// checking if asset exists or not
    	Asset existingAsset = assetRepository.findById(assetDto.getAssetId())
    			.orElseThrow(() -> new ResourceNotFoundException("Asset not found with ID: " + assetDto.getAssetId()));
    	try {
    		logger.info("Asset updated with id: " + existingAsset.getAssetId());
    		existingAsset.setAssetName(assetDto.getAssetName());
            existingAsset.setAssetModel(assetDto.getAssetModel());
            existingAsset.setCategory(mapToCategory(assetDto.getCategory()));
            existingAsset.setManufacturingDate(assetDto.getManufacturingDate());
            existingAsset.setExpiryDate(assetDto.getExpiryDate());
            existingAsset.setAssetValue(assetDto.getAssetValue());
            logger.info("Asset updated with ID: {}", existingAsset.getAssetId());
            return assetRepository.save(existingAsset);
    	} catch (Exception e) {
    		throw new BadRequestException("Failed to update asset: " + e.getMessage());
    	}
    }

    @Override
    public Asset getAssetById(Integer assetId) {
        logger.info("Trying to get asset with id: " + assetId);
    	return assetRepository.findById(assetId)
            .orElseThrow(() -> new ResourceNotFoundException("Asset not found with ID: " + assetId));
    }

    @Override
    public List<Asset> getAllAssets() {
        logger.info("Returning all the asset details.");
    	return assetRepository.findAll();
    }

    @Override
    public List<Asset> getAssetsByCategory(AssetCategory categoryName) {
        // getting assets with the given category
    	List<Asset> assets = assetRepository.findAssetByCategory(categoryName);
        if (assets.isEmpty()) {
            throw new ResourceNotFoundException("No assets found for category: " + categoryName.getCategoryName());
        }
        logger.info("Returning list of assets with category: " + categoryName);
        return assets;
    }

    @Override
    public void deleteAsset(Integer assetId) {
        // checking whether asset exists or not
    	Asset asset = assetRepository.findById(assetId)
            .orElseThrow(() -> new ResourceNotFoundException("Asset not found with ID: " + assetId));
    	// checking if asset already exists or not
        if (Asset.Status.Borrowed.equals(asset.getStatus())) {
            throw new BadRequestException("Cannot delete asset as it is currently borrowed");
        }
        logger.warn("Asset with id: " + assetId + " is deleted.");
        assetRepository.deleteById(assetId);
    }
    
    // mapping AssetCategoryDto object to AssetCategory object
    private AssetCategory mapToCategory(AssetCategoryDto categoryDto) {
        AssetCategory category = new AssetCategory();
        category.setCategoryId(categoryDto.getCategoryId());
        category.setCategoryName(categoryDto.getCategoryName());
        return category;
    }
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/service/EmployeeServiceImp.java:
package com.hexaware.ams.service;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hexaware.ams.dto.EmployeeDto;
import com.hexaware.ams.dto.RoleDto;
import com.hexaware.ams.dto.EmployeeDto.GenderDTO;
import com.hexaware.ams.entity.Employee;
import com.hexaware.ams.entity.Role;
import com.hexaware.ams.entity.Employee.Gender;
import com.hexaware.ams.exception.BadRequestException;
import com.hexaware.ams.exception.ResourceAlreadyExistsException;
import com.hexaware.ams.exception.ResourceNotFoundException;
import com.hexaware.ams.repository.IEmployeeRepository;

import jakarta.transaction.Transactional;

@Service
@Transactional
public class EmployeeServiceImp implements IEmployeeService {

	@Autowired
	IEmployeeRepository employeeRepository;
	
	Logger logger = LoggerFactory.getLogger(EmployeeServiceImp.class);

	@Override
	@Transactional
	public Employee registerEmployee(EmployeeDto employeeDto) {

		if (employeeRepository.existsById(employeeDto.getEmployeeId())) {

			throw new ResourceAlreadyExistsException("Id" + employeeDto.getEmployeeId() + " already exists ");

		}

		
		try {
			
			Employee employee = mapToEntity(employeeDto);
			
			logger.info("Employee added successfully");
			
			return employeeRepository.save(employee);
			

		}catch(Exception e) {
			
			throw new BadRequestException("Failed to add Employee:" + e.getMessage());
		}
		
	}

	@Override
	public Employee getEmployeeById(int employeeId) {

		logger.info("Getting Employee with Id");
		return employeeRepository.findById(employeeId)
				.orElseThrow(() -> new ResourceNotFoundException("Employee not found with id: " + employeeId));
	}

	@Override
	@Transactional
	public Employee updateEmployee(int employeeId,EmployeeDto employeeDetails) {

		logger.warn("Trying to update employee Details");
		
		Employee existingEmployee = employeeRepository.findById(employeeId)
				.orElseThrow(() -> new ResourceNotFoundException("Employee not found with id: " + employeeId));
		
		Employee e1 = mapToEntity(employeeDetails);

		try {
			
			existingEmployee.setName(e1.getName());
			existingEmployee.setGender(e1.getGender());
			existingEmployee.setContactNumber(e1.getContactNumber());
			existingEmployee.setAddress(e1.getAddress());
			existingEmployee.setEmail(e1.getEmail());
			existingEmployee.setPassword(e1.getPassword());
			existingEmployee.setRole(e1.getRole());

			
			logger.info("Updating employee details");
			return existingEmployee;
			
		} catch (Exception e) {

			throw new BadRequestException("Failed to update Employee:" + e.getMessage());
		}

	}

	@Override
	@Transactional
	public void deleteEmployee(int employeeId) {

		try {

			logger.warn("Attempting to delete Employee. Details will Erased");
			employeeRepository.deleteById(employeeId);

		} catch (Exception e) {

			throw new BadRequestException("Failed to delete Employee: " + e.getMessage());
		}

	}

	@Override
	public List<Employee> getAllEmployee() {

		List<Employee> employee = employeeRepository.findAll();

		if (employee.isEmpty()) {

			logger.warn("Problem with getting list of employees");
			throw new ResourceNotFoundException("No Employee List exists ");
		}

		logger.info("Employee list retrieved successfully");
		return employee;
	}

	@Override
	public int findByEmailandPassword(String email, String password) {

		try {

			logger.info("Trying to find Employee Email and Password");
			return employeeRepository.findByEmailAndPassword(email, password);

		} catch (Exception e) {

			throw new ResourceNotFoundException("Entered email and password does not exist" + email + password);
		}

	}

	@Override
	public boolean existsByEmail(String email) {

		try {

			logger.info("Checking if Employee email exists");
			return employeeRepository.existsByEmail(email);

		} catch (Exception e) {

			throw new ResourceNotFoundException("Employee with email: " + email + "does not exist ");
		}

	}
	
	
		//Helper method to convert DTO to Entity
		public Employee mapToEntity(EmployeeDto employeeDto) {
			
			Employee employee = new Employee();
			if (employeeDto.getEmployeeId() != 0) {
		        employee.setEmployeeId(employeeDto.getEmployeeId());
		    }
			employee.setName(employeeDto.getName());
			employee.setGender(Gender.valueOf(employeeDto.getGender().name()));
			employee.setContactNumber(employeeDto.getContactNumber());
			employee.setAddress(employeeDto.getAddress());
			employee.setEmail(employeeDto.getEmail());
			employee.setPassword(employeeDto.getPassword());
			employee.setRole(new Role (employeeDto.getRole().getRoleId(), employeeDto.getRole().getRoleName()));
			
			return employee;
		}
		

		//Helper method to convert Entity to DTO
		public EmployeeDto mapToDTO(Employee employee) {
			
			return new EmployeeDto(
					employee.getEmployeeId(),
					employee.getName(),
					GenderDTO.valueOf(employee.getGender().name()),
					employee.getContactNumber(),
					employee.getAddress(),
					employee.getEmail(),
					employee.getPassword(),
					new RoleDto (employee.getRole().getRoleId(), employee.getRole().getRoleName())
					);

		}
		
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/service/IAssetAuditService.java:
package com.hexaware.ams.service;
/*
@Author: Arghya Mandal
Date: 9-11-2024
*/
import java.util.List;

import com.hexaware.ams.dto.AssetAuditDto;
import com.hexaware.ams.entity.AssetAudit;

public interface IAssetAuditService {
	public AssetAudit sendAuditRequest(int employeeId, int assetId);
	public AssetAudit updateAuditStatus(int auditId, AssetAuditDto.AuditStatus auditStatus);
	public List<AssetAudit> getAuditsByEmployee(int employeeId);
	public List<AssetAudit> getAllAudits();
	public AssetAudit getAuditById(int auditId);
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/service/IAssetBorrowingService.java:
package com.hexaware.ams.service;
/*
@Author: Arghya Mandal
Date: 9-11-2024
*/
import java.util.List;

import com.hexaware.ams.entity.AssetBorrowing;

public interface IAssetBorrowingService {
	public AssetBorrowing borrowAsset(int employeeId, int assetId);
	public AssetBorrowing returnAsset(int borrowingId);
	public List<AssetBorrowing> getBorrowingsByEmployee(int employeeId);
	public List<AssetBorrowing> getAllActiveBorrowings();
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/service/IAssetService.java:
package com.hexaware.ams.service;
/*
@Author: Arghya Mandal
Date: 9-11-2024
*/
import java.util.List;

import com.hexaware.ams.dto.AssetDto;
import com.hexaware.ams.entity.Asset;
import com.hexaware.ams.entity.AssetCategory;

public interface IAssetService {
	public Asset addAsset(AssetDto assetDto);
	public Asset updateAsset(AssetDto assetDto);
    public Asset getAssetById(Integer assetId);
    public List<Asset> getAllAssets();
    public List<Asset> getAssetsByCategory(AssetCategory categoryName);
    public void deleteAsset(Integer assetId);
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/service/IEmployeeService.java:
package com.hexaware.ams.service;

import java.util.List;

import com.hexaware.ams.dto.EmployeeDto;
import com.hexaware.ams.entity.Employee;

public interface IEmployeeService {
	
	Employee registerEmployee(EmployeeDto employeeDto);
	Employee getEmployeeById(int employeeId);
	Employee updateEmployee(int employeeId, EmployeeDto employeeDetails);
	void deleteEmployee(int employeeId);
	List<Employee> getAllEmployee();
	int findByEmailandPassword(String email, String password);
	boolean existsByEmail(String email);

}

assetmanagement_springrest/src/main/java/com/hexaware/ams/service/IIssueTypeService.java:
package com.hexaware.ams.service;

import java.util.List;

import com.hexaware.ams.dto.IssueTypeDto;
import com.hexaware.ams.entity.IssueType;

public interface IIssueTypeService {

	IssueType addIssueType(IssueTypeDto issueType);
	IssueType getIssueTypeById(int issueTypeId);
	IssueType getIssueTypeByName(String issueTypeName);
	List<IssueType> getAllIssueTypes();
	IssueType updateIssueType(int issueTypeId, IssueTypeDto issueTypeDetails);
	void deleteIssueType(int issueTypeId);
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/service/IServiceRequestService.java:
package com.hexaware.ams.service;

import java.util.List;

import com.hexaware.ams.dto.ServiceRequestDto;
import com.hexaware.ams.dto.ServiceRequestDto;
import com.hexaware.ams.entity.ServiceRequest;

public interface IServiceRequestService {

	ServiceRequest createServiceRequest(int employeeId, int assetId, int issueTypeId, String Description);
	ServiceRequest getServiceRequestById(int serviceRequestId);
	ServiceRequest updateServiceRequestStatus(int serviceRequestId, ServiceRequest.Status status);
	List<ServiceRequest> getServiceRequestsByEmployee(int employeeId);
	List<ServiceRequest> getAllServiceRequests();
	List<ServiceRequest> findByStatus(String status);
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/service/IssueTypeServiceImp.java:
package com.hexaware.ams.service;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hexaware.ams.dto.IssueTypeDto;
import com.hexaware.ams.entity.IssueType;
import com.hexaware.ams.exception.BadRequestException;
import com.hexaware.ams.exception.ResourceAlreadyExistsException;
import com.hexaware.ams.exception.ResourceNotFoundException;
import com.hexaware.ams.repository.IIssueTypeRepository;

import jakarta.transaction.Transactional;

@Service
@Transactional
public class IssueTypeServiceImp implements IIssueTypeService {

	@Autowired
	IIssueTypeRepository issueTypeRepository;
	
	Logger logger = LoggerFactory.getLogger(EmployeeServiceImp.class);
	
	@Override
	@Transactional
	public IssueType addIssueType(IssueTypeDto issueType) {
		
		if(issueTypeRepository.existsByIssueTypeName(issueType.getIssueTypeName())) {
			
			throw new ResourceAlreadyExistsException("Issue Type already exists" + issueType.getIssueTypeName());
		}
		
		IssueType i1 = mapToEntity(issueType);
		
		logger.info("Adding a new Issue Type");
		
		return issueTypeRepository.save(i1);
	}

	@Override
	public IssueType getIssueTypeById(int issueTypeId) {
		
		logger.info("Finding Issue with given Id");
		return issueTypeRepository.findById(issueTypeId)
				.orElseThrow(() -> new ResourceNotFoundException("Issue Type not found with id " + issueTypeId));
	}

	@Override
	public IssueType getIssueTypeByName(String issueTypeName) {
		
		logger.info("Trying to find Issue Type with given name ");
		IssueType issueType = issueTypeRepository.findByIssueTypeName(issueTypeName);
		
		if(issueType == null) {
			
			logger.info("Could not find Issue Type with given Name ");
			throw new ResourceNotFoundException("Issue type not found" + issueTypeName);
		}
		
		return issueType;
	}

	@Override
	public List<IssueType> getAllIssueTypes() {
		
		return issueTypeRepository.findAll();
	}

	@Override
	@Transactional
	public IssueType updateIssueType(int issueTypeId, IssueTypeDto issueTypeDetails) {

		logger.warn("Issue Type will be updated");
		
		IssueType issueType = getIssueTypeById(issueTypeId);
		
		if(issueType == null){
			
			throw new ResourceNotFoundException("Issue with id " +  issueTypeId + "not found" );
			
		}
		
		IssueType i2 = mapToEntity(issueTypeDetails);
		
		issueType.setIssueTypeName(i2.getIssueTypeName());
		
		logger.info("Updated the issue requested");
		
		return issueTypeRepository.save(issueType);
		
		
	}

	@Override
	@Transactional
	public void deleteIssueType(int issueTypeId) {
		
		try {
			
		logger.warn("Issue will be deleted");
		issueTypeRepository.deleteById(issueTypeId);
		
		}catch(Exception e) {
			
			throw new BadRequestException("Failed to delete issue");
		}

	}
	
	public IssueType mapToEntity(IssueTypeDto issueTypeDto) {
		
		IssueType issueType = new IssueType();
		if(issueTypeDto.getIssueTypeId() != 0) {
			issueType.setIssueTypeId(issueTypeDto.getIssueTypeId());
		}
		issueType.setIssueTypeName(issueTypeDto.getIssueTypeName());
		
		return issueType;
	}

}

assetmanagement_springrest/src/main/java/com/hexaware/ams/service/ServiceRequestServiceImp.java:


package com.hexaware.ams.service;

import java.time.LocalDateTime;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hexaware.ams.dto.AssetDto;
import com.hexaware.ams.dto.EmployeeDto;
import com.hexaware.ams.dto.IssueTypeDto;
import com.hexaware.ams.dto.ServiceRequestDto;
import com.hexaware.ams.entity.Asset;
import com.hexaware.ams.entity.AssetCategory;
import com.hexaware.ams.entity.Employee;
import com.hexaware.ams.entity.IssueType;
import com.hexaware.ams.entity.ServiceRequest;
import com.hexaware.ams.entity.ServiceRequest.Status;
import com.hexaware.ams.exception.BadRequestException;
import com.hexaware.ams.exception.MethodArgumentNotValidException;
import com.hexaware.ams.exception.ResourceAlreadyExistsException;
import com.hexaware.ams.exception.ResourceNotFoundException;
import com.hexaware.ams.repository.IAssetRepository;
import com.hexaware.ams.repository.IEmployeeRepository;
import com.hexaware.ams.repository.IIssueTypeRepository;
import com.hexaware.ams.repository.IServiceRequestRepository;

import jakarta.transaction.Transactional;

@Service
public class ServiceRequestServiceImp implements IServiceRequestService {

	@Autowired
	private IServiceRequestRepository serviceRequestRepository;
	
	@Autowired
	private EmployeeServiceImp eS1;
	
	@Autowired
	private IssueTypeServiceImp iTS1;
	
	@Autowired
	private IEmployeeRepository employeeRepository;
	
	@Autowired
	private IAssetRepository assetRepository;
	
	@Autowired
	private IIssueTypeRepository issueTypeRepository;
	
	Logger logger = LoggerFactory.getLogger(ServiceRequestServiceImp.class);
	
	@Override
	public ServiceRequest createServiceRequest(int employeeId, int assetId, int issueTypeId, String Description) {
		
		try {
		Employee e1 = employeeRepository.findById(employeeId)
				.orElseThrow(() -> new ResourceNotFoundException("Employee not found with ID: " + employeeId));
		
		Asset a1 = assetRepository.findById(assetId)
				.orElseThrow(() -> new ResourceNotFoundException("Asset Not Found with id " + assetId));
		
		IssueType i1 = issueTypeRepository.findById(issueTypeId)
				.orElseThrow(() -> new ResourceNotFoundException("Issue Type not Found with id " + issueTypeId));
		
		ServiceRequest serviceRequest = new ServiceRequest();
		
		serviceRequest.setEmployee(e1);
		serviceRequest.setAsset(a1);
		serviceRequest.setDescription(Description);
		serviceRequest.setIssueType(i1);
		serviceRequest.setStatus(Status.Pending);
		serviceRequest.setRequestedAt(LocalDateTime.now());
		
		return serviceRequestRepository.save(serviceRequest);
		}
		catch(Exception e) {
			
			throw new BadRequestException("Failed to create a new Service Request");
		}
	}

	@Override
	public ServiceRequest getServiceRequestById(int serviceRequestId) {
		
		logger.info("Trying to find service request by Id");
		return serviceRequestRepository.findById(serviceRequestId)
				.orElseThrow(() -> new ResourceNotFoundException("Service Request not found with id " + serviceRequestId) );
	}
	
	@Override
	@Transactional
	public ServiceRequest updateServiceRequestStatus(int serviceRequestId, ServiceRequest.Status status) {
		
		logger.warn("Service Request Status will be updated");
		ServiceRequest serviceRequest = serviceRequestRepository.findById(serviceRequestId)
				.orElseThrow(() -> new ResourceNotFoundException("Service Request Not Found"));
		
		serviceRequest.setStatus(status);
		
		logger.info("Service Request status updated successfully");
		
		return serviceRequest;
		
	}
	

	@Override
	public List<ServiceRequest> getServiceRequestsByEmployee(int employeeId) {
		
		try {
			
			logger.info("Getting Service Requests by Employee Id");
		return serviceRequestRepository.findByEmployeeEmployeeId(employeeId);
		
		}catch(Exception e) {
			
			throw new ResourceNotFoundException("Service Request for Employee does not exist" + employeeId);
		}
		
	}

	@Override
	public List<ServiceRequest> getAllServiceRequests() {
		
		logger.info("Getting List of all Service Requests");
		return serviceRequestRepository.findAll();
	}

	
	
	@Override
	public List<ServiceRequest> findByStatus(ServiceRequest.Status status) {
		
		
		List<ServiceRequest> s1 = serviceRequestRepository.findByStatus(status);
		
		return s1;
	}
	
	
	
	
	
	//Map ServiceRequestDto to ServiceRequest Entity
	public ServiceRequest mapToEntity(ServiceRequestDto s1) {
		
		ServiceRequest newServiceRequest = new ServiceRequest();
		
		if(s1.getServiceRequestId() != 0) {
			newServiceRequest.setServiceRequestId(s1.getServiceRequestId());
		}
		
		newServiceRequest.setEmployee(eS1.mapToEntity(s1.getEmployee()));
		
		//Need to add Asset Map to Entity function here 
		newServiceRequest.setAsset(mapToAssetEntity(s1.getAsset()));
		
		newServiceRequest.setDescription(s1.getDescription());
		
		newServiceRequest.setIssueType(iTS1.mapToEntity(s1.getIssueType()));
		
		newServiceRequest.setRequestedAt(s1.getRequestedAt());
		
		newServiceRequest.setStatus(Status.valueOf(s1.getStatus().name()));
		
		newServiceRequest.setRequestedAt(s1.getRequestedAt());
		
		return newServiceRequest;	
	
	}
	
	
	//Map AssetDto to AssetEntity
	public Asset mapToAssetEntity(AssetDto assetDto) {
		
		Asset a1 = new Asset();
		if(assetDto.getAssetId() != 0) {
			a1.setAssetId(assetDto.getAssetId());
		}
		
		a1.setAssetName(assetDto.getAssetName());
		a1.setCategory(new AssetCategory(assetDto.getCategory().getCategoryId(), assetDto.getCategory().getCategoryName()));
		a1.setAssetModel(assetDto.getAssetModel());
		a1.setManufacturingDate(assetDto.getManufacturingDate());
		a1.setExpiryDate(assetDto.getExpiryDate());
		a1.setAssetValue(assetDto.getAssetValue());
		
		return a1;
	}
	
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/config/CustomUserDetailsService.java:
package com.hexaware.ams.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import com.hexaware.ams.repository.IEmployeeRepository;

@Service
public class CustomUserDetailsService implements UserDetailsService {

    @Autowired
    private IEmployeeRepository employeeRepository;

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        return employeeRepository.findByEmail(username)
                .orElseThrow(() -> new UsernameNotFoundException("User not found"));
    }
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/config/JwtAuthenticationFilter.java:
package com.hexaware.ams.config;

import java.io.IOException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
public class JwtAuthenticationFilter extends OncePerRequestFilter {

    @Autowired
    private JwtService jwtService;
    
    @Autowired
    private CustomUserDetailsService userDetailsService;

    @Override
    protected void doFilterInternal(HttpServletRequest request, 
            HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        
        final String authHeader = request.getHeader("Authorization");
        final String jwt;
        final String userEmail;
        
        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            filterChain.doFilter(request, response);
            return;
        }
        
        jwt = authHeader.substring(7);
        userEmail = jwtService.extractUsername(jwt);
        
        if (userEmail != null && SecurityContextHolder.getContext().getAuthentication() == null) {
            UserDetails userDetails = this.userDetailsService.loadUserByUsername(userEmail);
            
            if (jwtService.isTokenValid(jwt, userDetails)) {
                UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(
                        userDetails, null, userDetails.getAuthorities());
                authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                SecurityContextHolder.getContext().setAuthentication(authToken);
            }
        }
        filterChain.doFilter(request, response);
    }
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/config/JwtService.java:
package com.hexaware.ams.config;

import java.security.Key;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import com.hexaware.ams.entity.Employee;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;

@Service
public class JwtService {
    
    private static final String SECRET_KEY = "404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970";
    
    public String extractUsername(String token) {
        return extractClaim(token, Claims::getSubject);
    }
    
    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        final Claims claims = extractAllClaims(token);
        return claimsResolver.apply(claims);
    }
    
    public String generateToken(UserDetails userDetails) {
        return generateToken(new HashMap<>(), userDetails);
    }
    
    public String generateToken(Map<String, Object> extraClaims, UserDetails userDetails) {
    	Employee employee = (Employee) userDetails;
    	extraClaims.put("employeeId", employee.getEmployeeId());
        extraClaims.put("name", employee.getName());
        extraClaims.put("role", employee.getRole().getRoleName());
        return Jwts.builder()
                .setClaims(extraClaims)
                .setSubject(userDetails.getUsername())
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 24000))
                .signWith(getSignInKey(), SignatureAlgorithm.HS256)
                .compact();
    }
    
    public boolean isTokenValid(String token, UserDetails userDetails) {
        final String username = extractUsername(token);
        return (username.equals(userDetails.getUsername())) && !isTokenExpired(token);
    }
    
    private boolean isTokenExpired(String token) {
        return extractExpiration(token).before(new Date());
    }
    
    private Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }
    
    private Claims extractAllClaims(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(getSignInKey())
                .build()
                .parseClaimsJws(token)
                .getBody();
    }
    
    private Key getSignInKey() {
        byte[] keyBytes = java.util.Base64.getDecoder().decode(SECRET_KEY);
        return Keys.hmacShaKeyFor(keyBytes);
    }
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/config/SecurityConfig.java:
package com.hexaware.ams.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
@EnableWebSecurity
public class SecurityConfig {
    
    @Autowired
    private JwtAuthenticationFilter jwtAuthFilter;
    
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        return http.csrf().disable()
                .authorizeHttpRequests()
                .requestMatchers("/api/auth/**").permitAll()
                .anyRequest().authenticated()
                .and()
                .sessionManagement()
                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                .and()
                .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class)
                .build();
    }
    
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
    
    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
        return config.getAuthenticationManager();
    }
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/controller/AssetAuditController.java:
package com.hexaware.ams.controller;
/*
@Author: Arghya Mandal
Date: 16-11-2024
*/
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.hexaware.ams.dto.AssetAuditDto;
import com.hexaware.ams.entity.AssetAudit;
import com.hexaware.ams.service.IAssetAuditService;

@RestController
@RequestMapping("/api/audits")
public class AssetAuditController {

    @Autowired
    private IAssetAuditService assetAuditService;

    // Create a new audit request
    @PostMapping("/send/{employeeId}/{assetId}")
    public ResponseEntity<AssetAudit> sendAuditRequest(@PathVariable int employeeId, @PathVariable int assetId) {
        AssetAudit audit = assetAuditService.sendAuditRequest(employeeId, assetId);
        return new ResponseEntity<>(audit, HttpStatus.CREATED);
    }

    // Update audit status
    @PutMapping("/update/{auditId}/{auditStatus}")
    public ResponseEntity<AssetAudit> updateAuditStatus(@PathVariable int auditId, @PathVariable AssetAuditDto.AuditStatus auditStatus) {
        AssetAudit updatedAudit = assetAuditService.updateAuditStatus(auditId, auditStatus);
        return ResponseEntity.ok(updatedAudit);
    }

    // Get audits by employee
    @GetMapping("/getbyeid/{employeeId}")
    public ResponseEntity<List<AssetAudit>> getAuditsByEmployee(@PathVariable int employeeId) {
        List<AssetAudit> audits = assetAuditService.getAuditsByEmployee(employeeId);
        return ResponseEntity.ok(audits);
    }

    // Get all audits
    @GetMapping("/getall")
    public ResponseEntity<List<AssetAudit>> getAllAudits() {
        List<AssetAudit> audits = assetAuditService.getAllAudits();
        return ResponseEntity.ok(audits);
    }

    // Get audit by ID
    @GetMapping("/getbyid/{auditId}")
    public ResponseEntity<AssetAudit> getAuditById(@PathVariable int auditId) {
        AssetAudit audit = assetAuditService.getAuditById(auditId);
        return ResponseEntity.ok(audit);
    }
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/controller/AssetBorrowingController.java:
package com.hexaware.ams.controller;
/*
@Author: Arghya Mandal
Date: 16-11-2024
*/
import com.hexaware.ams.entity.AssetBorrowing;
import com.hexaware.ams.service.IAssetBorrowingService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/borrowings")
public class AssetBorrowingController {

    @Autowired
    private IAssetBorrowingService assetBorrowingService;

    // Borrow an asset
    @PostMapping("/borrow/{employeeId}/{assetId}")
    public ResponseEntity<AssetBorrowing> borrowAsset(@PathVariable int employeeId, @PathVariable int assetId) {
        AssetBorrowing borrowing = assetBorrowingService.borrowAsset(employeeId, assetId);
        return ResponseEntity.ok(borrowing);
    }

    // Return an asset
    @PutMapping("/return/{borrowingId}")
    public ResponseEntity<AssetBorrowing> returnAsset(@PathVariable int borrowingId) {
        AssetBorrowing borrowing = assetBorrowingService.returnAsset(borrowingId);
        return ResponseEntity.ok(borrowing);
    }

    // Get borrowings by employee
    @GetMapping("/getbyeid/{employeeId}")
    public ResponseEntity<List<AssetBorrowing>> getBorrowingsByEmployee(@PathVariable int employeeId) {
        List<AssetBorrowing> borrowings = assetBorrowingService.getBorrowingsByEmployee(employeeId);
        return ResponseEntity.ok(borrowings);
    }

    // Get all active borrowings
    @GetMapping("/active")
    public ResponseEntity<List<AssetBorrowing>> getAllActiveBorrowings() {
        List<AssetBorrowing> activeBorrowings = assetBorrowingService.getAllActiveBorrowings();
        return ResponseEntity.ok(activeBorrowings);
    }
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/controller/AssetController.java:
package com.hexaware.ams.controller;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.hexaware.ams.dto.AssetDto;
/*
@Author: Arghya Mandal
Date: 16-11-2024
*/
import com.hexaware.ams.entity.Asset;
import com.hexaware.ams.entity.AssetCategory;
import com.hexaware.ams.service.IAssetService;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/api/assets")
public class AssetController {

    @Autowired
    private IAssetService assetService;

    // Add a new asset
    @PostMapping("/add")
    public ResponseEntity<Asset> addAsset(@Valid @RequestBody AssetDto assetDto) {
        Asset newAsset = assetService.addAsset(assetDto);
        return new ResponseEntity<>(newAsset, HttpStatus.CREATED);
    }

    // Update an existing asset
    @PutMapping("/update/{assetId}")
    public ResponseEntity<Asset> updateAsset(@PathVariable Integer assetId, @Valid @RequestBody AssetDto assetDto) {
        assetDto.setAssetId(assetId);
        Asset updatedAsset = assetService.updateAsset(assetDto);
        return ResponseEntity.ok(updatedAsset);
    }

    // Get asset by ID
    @GetMapping("/getbyid/{assetId}")
    public ResponseEntity<Asset> getAssetById(@PathVariable Integer assetId) {
        Asset asset = assetService.getAssetById(assetId);
        return ResponseEntity.ok(asset);
    }

    // Get all assets
    @GetMapping("/getall")
    public ResponseEntity<List<Asset>> getAllAssets() {
        List<Asset> assets = assetService.getAllAssets();
        return ResponseEntity.ok(assets);
    }

    // Get assets by category
    @GetMapping("/category")
    public ResponseEntity<List<Asset>> getAssetsByCategory(@RequestBody AssetCategory categoryName) {
        List<Asset> assets = assetService.getAssetsByCategory(categoryName);
        return ResponseEntity.ok(assets);
    }

    // Delete an asset
    @DeleteMapping("/delete/{assetId}")
    public ResponseEntity<Void> deleteAsset(@PathVariable Integer assetId) {
        assetService.deleteAsset(assetId);
        return ResponseEntity.noContent().build();
    }
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/controller/AuthenticationController.java:
package com.hexaware.ams.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.hexaware.ams.config.JwtService;
import com.hexaware.ams.dto.AuthenticationRequest;
import com.hexaware.ams.dto.AuthenticationResponse;
import com.hexaware.ams.dto.RegisterRequest;
import com.hexaware.ams.entity.Employee;
import com.hexaware.ams.entity.Role;
import com.hexaware.ams.exception.ResourceAlreadyExistsException;
import com.hexaware.ams.exception.ResourceNotFoundException;
import com.hexaware.ams.repository.IEmployeeRepository;
import com.hexaware.ams.repository.IRoleRepository;

@RestController
@RequestMapping("/api/auth")
public class AuthenticationController {

    @Autowired
    private IEmployeeRepository employeeRepository;
    
    @Autowired
    private IRoleRepository roleRepository;
    
    @Autowired
    private PasswordEncoder passwordEncoder;
    
    @Autowired
    private JwtService jwtService;
    
    @Autowired
    private AuthenticationManager authenticationManager;

    @PostMapping("/register")
    public ResponseEntity<AuthenticationResponse> register(@RequestBody RegisterRequest request) {
    	// Check if email already exists
    	if (employeeRepository.findByEmail(request.getEmail()).isPresent()) {
            throw new ResourceAlreadyExistsException("Email already registered");
        }
    	// verifying role
    	Role role = roleRepository.findById(request.getRoleId())
                .orElseThrow(() -> new ResourceNotFoundException("Role not found"));
    	Employee employee = new Employee();
        // Set employee properties from request
    	employee.setName(request.getName());
        employee.setGender(request.getGender());
        employee.setContactNumber(request.getContactNumber());
        employee.setAddress(request.getAddress());
        employee.setEmail(request.getEmail());
        employee.setPassword(passwordEncoder.encode(request.getPassword()));
        employee.setRole(role);

        employeeRepository.save(employee);
        
        String jwtToken = jwtService.generateToken(employee);
        return ResponseEntity.ok(new AuthenticationResponse(jwtToken));
    }

    @PostMapping("/authenticate")
    public ResponseEntity<AuthenticationResponse> authenticate(@RequestBody AuthenticationRequest request) {
        authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                        request.getEmail(),
                        request.getPassword()
                )
        );
        
        Employee employee = employeeRepository.findByEmail(request.getEmail())
                .orElseThrow();
        String jwtToken = jwtService.generateToken(employee);
        return ResponseEntity.ok(new AuthenticationResponse(jwtToken));
    }
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/controller/EmployeeController.java:
package com.hexaware.ams.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.hexaware.ams.dto.EmployeeDto;
import com.hexaware.ams.dto.EmployeeDto.GenderDTO;
import com.hexaware.ams.dto.RoleDto;
import com.hexaware.ams.entity.Employee;
import com.hexaware.ams.entity.Employee.Gender;
import com.hexaware.ams.entity.Role;
import com.hexaware.ams.service.IEmployeeService;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/ams/employee")
@Validated
public class EmployeeController {

	@Autowired
	IEmployeeService employeeService;

	// Register a New Employee
	@PostMapping("/register")
	public ResponseEntity<Employee> registerEmployee(@Valid @RequestBody EmployeeDto employeeDto) {

		Employee registeredEmployee = employeeService.registerEmployee(employeeDto);

		return new ResponseEntity<>(registeredEmployee, HttpStatus.CREATED);
	}

	// Get Employee By Id
	@GetMapping("/getEmployeeById/{employeeId}")
	public ResponseEntity<Employee> getEmployeeById(@PathVariable int employeeId) {

		Employee employee = employeeService.getEmployeeById(employeeId);

		return ResponseEntity.ok(employee);

	}

	// Update existing Employee details
	@PutMapping("/updateEmployee/{employeeId}")
	public ResponseEntity<Employee> updateEmployee(@Valid @PathVariable  int employeeId, @RequestBody EmployeeDto employeeDetails) {

		Employee updateEmployee = employeeService.updateEmployee(employeeId, employeeDetails);

		return ResponseEntity.ok(updateEmployee);
	}

	// Delete an Employee Record
	@DeleteMapping("/delete/{employeeId}")
	public ResponseEntity<Void> deleteEmployee(@PathVariable int employeeId) {

		employeeService.deleteEmployee(employeeId);

		return ResponseEntity.noContent().build();
	}

	// List of all current Employees
	@GetMapping("/getAllEmployee")
	public ResponseEntity<List<Employee>> getAllEmployee() {

		List<Employee> employee = employeeService.getAllEmployee();

		return ResponseEntity.ok(employee);
	}
	
}

assetmanagement_springrest/src/main/java/com/hexaware/ams/controller/IssueTypeController.java:
package com.hexaware.ams.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.hexaware.ams.dto.IssueTypeDto;
import com.hexaware.ams.entity.IssueType;
import com.hexaware.ams.service.IIssueTypeService;

import jakarta.transaction.Transactional;
import jakarta.validation.Valid;

@RestController
@RequestMapping("/ams/IssueType")
@Validated
public class IssueTypeController {
	
	@Autowired
	IIssueTypeService issueTypeService;
	
	
	//Create a new IssueType
	@PostMapping("/addIssueType")
	@Transactional
	public ResponseEntity<IssueType> addIssueType(@Valid @RequestBody IssueTypeDto issueType) {
		
		IssueType newIssueType = issueTypeService.addIssueType(issueType);
		
		return new ResponseEntity<>(newIssueType, HttpStatus.CREATED);
	}
	
	
	//Get an Issue Type by Id
	@GetMapping("/issueTypeById/{issueTypeId}")
	public ResponseEntity<IssueType> getIssueTypeById(@PathVariable int issueTypeId) {
		
		IssueType issueType = issueTypeService.getIssueTypeById(issueTypeId);
		
		return ResponseEntity.ok(issueType);
	}
	
	
	//Get an Issue Type by Name
	@GetMapping("/issueTypeByName/{issueTypeName}")
	public ResponseEntity<IssueType> getIssueTypeByName(@PathVariable String issueTypeName) {
		
		IssueType issueTypeByName = issueTypeService.getIssueTypeByName(issueTypeName);
		
		return ResponseEntity.ok(issueTypeByName);
	}
	
	
	//All issue Types 
	@GetMapping("/allIssueTypes")
	public ResponseEntity<List<IssueType>> getAllIssueTypes(){
		
		List<IssueType> issueType = issueTypeService.getAllIssueTypes();
		
		return ResponseEntity.ok(issueType);
		
	}
	
	
	// Update an Issue Type 
	@PutMapping("/updateIssueType/{issueTypeId}/{issueTypeDetails}")
	@Transactional
	public ResponseEntity<IssueType> updateIssueType(@PathVariable int issueTypeId, @Valid @RequestBody IssueTypeDto issueTypeDetails) {
		
		IssueType updatedIssueType = issueTypeService.updateIssueType(issueTypeId, issueTypeDetails);
		
		return ResponseEntity.ok(updatedIssueType);
	}
	
	// Delete an Issue Type using Id
	@DeleteMapping("/delete/{issueTypeId}")
	@Transactional
	public ResponseEntity<Void> deleteIssueType(@PathVariable int issueTypeId) {
		
		issueTypeService.deleteIssueType(issueTypeId);
		
		return ResponseEntity.noContent().build();
	}

}

assetmanagement_springrest/src/main/java/com/hexaware/ams/controller/ServiceRequestController.java:
package com.hexaware.ams.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.hexaware.ams.dto.ServiceRequestDto;
import com.hexaware.ams.entity.ServiceRequest;
import com.hexaware.ams.service.IServiceRequestService;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/ams/servicerequest")
public class ServiceRequestController {
	
	@Autowired
	IServiceRequestService serviceRequestService;
	
	
	//Create a new Service Request
	@PostMapping("/createServiceRequest/{employeeId}/{assetId}/{issueTypeId}")
	public ResponseEntity<ServiceRequest> createServiceRequest(@PathVariable int employeeId, @PathVariable int assetId, @PathVariable int issueTypeId, @RequestBody String Description) {
		
		ServiceRequest newServiceRequest = serviceRequestService.createServiceRequest(employeeId, assetId, issueTypeId, Description);
		return new ResponseEntity<>(newServiceRequest,HttpStatus.CREATED);
	}
	
	//Get Service Request By its Id
	@GetMapping("/getServiceRequestById/{serviceRequestId}")
	public ResponseEntity<ServiceRequest> getServiceRequestById(@PathVariable int serviceRequestId) {
		
		ServiceRequest serviceRequest = serviceRequestService.getServiceRequestById(serviceRequestId);
		
		return ResponseEntity.ok(serviceRequest);
	}
	
	
	// Update a Service Request By id
	@PutMapping("/updateServiceRequest/{serviceRequestId}/{Status}")
	public ResponseEntity<ServiceRequest> updateServiceRequest(@PathVariable int serviceRequestId, @PathVariable ServiceRequest.Status status) {
		
		ServiceRequest updatedServiceRequest = serviceRequestService.updateServiceRequestStatus(serviceRequestId, status);
		
		return ResponseEntity.ok(updatedServiceRequest);
	}
	
	
	//Get service Requests By Employee Id 
	@GetMapping("/serviceRequestByEmployee/{employeeId}")
	public ResponseEntity<List<ServiceRequest>> getServiceRequestsByEmployee(@PathVariable int employeeId){
		
		List<ServiceRequest> employeeserviceRequest = serviceRequestService.getServiceRequestsByEmployee(employeeId);
		
		return ResponseEntity.ok(employeeserviceRequest);
	}
	
	
	
	// Get all service Request 
	@GetMapping("/allServiceRequests")
	public ResponseEntity<List<ServiceRequest>> getAllServiceRequests(){
		
		List<ServiceRequest> serviceRequest = serviceRequestService.getAllServiceRequests();
		
		return ResponseEntity.ok(serviceRequest);
	}
	
	
	
	// Find Service Requests by providing a Status
	@GetMapping("/findByStatus/{status}")
	public ResponseEntity<List<ServiceRequest>> findByStatus(@PathVariable ServiceRequest.Status status){
		
		List<ServiceRequest> serviceRequestByStatus = serviceRequestService.findByStatus(status);
		
		return ResponseEntity.ok(serviceRequestByStatus);
	}
}

assetmanagement_springrest/src/main/resources/application.properties:
spring.application.name=asset_management
spring.jpa.hibernate.ddl-auto=update
spring.datasource.username=root
spring.datasource.password=Venkatesh#12
spring.datasource.url=jdbc:mysql://localhost:3306/asset_management
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.show-sql: true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
logging.level.root = info
logging.level.com.hexaware.ams.* = debug
logging.pattern.console=%clr(%d{yyyy-MM-dd}){red} %clr([%level]) %m %n
logging.file.name = assets_log_file.log
logging.pattern.file= %clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){green} [%level] %c{1.} [%t] %m%n
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
jwt.secret=404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970
jwt.expiration=86400000